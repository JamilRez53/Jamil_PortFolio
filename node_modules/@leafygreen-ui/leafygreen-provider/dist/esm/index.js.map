{"version":3,"file":"index.js","sources":["../../src/DarkModeContext.tsx","../../src/MigrationContext/MigrationContext.tsx","../../src/PortalContext.tsx","../../src/TypographyContext.tsx","../../src/UsingKeyboardContext.tsx","../../src/LeafyGreenContext.tsx","../../src/PopoverContext/PopoverContext.tsx","../../src/PopoverPropsContext/PopoverPropsContext.tsx","../../src/PopoverPropsContext/PopoverPropsContext.types.ts"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getTheme, Theme } from '@leafygreen-ui/lib';\n\ninterface DarkModeContextProps {\n  contextDarkMode?: boolean;\n  setDarkMode: React.Dispatch<boolean>;\n}\n\nconst DarkModeContext = createContext<DarkModeContextProps>({\n  contextDarkMode: false,\n  setDarkMode: () => {},\n});\nexport const useDarkModeContext = () => useContext(DarkModeContext);\n\ntype useDarkMode = (localDarkMode?: boolean) => {\n  darkMode: boolean;\n  theme: Theme;\n  setDarkMode: React.Dispatch<boolean>;\n};\n\nexport const useDarkMode: useDarkMode = localDarkMode => {\n  const { contextDarkMode, setDarkMode } = useDarkModeContext();\n  const darkMode = localDarkMode ?? contextDarkMode ?? false;\n  const theme = getTheme(darkMode);\n  return { darkMode, theme, setDarkMode };\n};\n\nfunction DarkModeProvider({\n  children,\n  contextDarkMode,\n  setDarkMode,\n}: PropsWithChildren<DarkModeContextProps>) {\n  return (\n    <DarkModeContext.Provider\n      value={{\n        contextDarkMode,\n        setDarkMode,\n      }}\n    >\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nDarkModeProvider.displayName = 'DarkModeProvider';\n\nDarkModeProvider.propTypes = {\n  children: PropTypes.node,\n  contextDarkMode: PropTypes.bool,\n};\n\nexport default DarkModeProvider;\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MigrationContextType } from './MigrationContext.types';\n\nexport const MigrationContext = createContext<MigrationContextType>({\n  forceUseTopLayer: false,\n});\n\n/**\n * Access the modal popover context\n */\nexport const useMigrationContext = (): MigrationContextType => {\n  return useContext(MigrationContext);\n};\n\n/**\n * Creates a global context for migration purposes.\n * Call `useMigrationContext` to access the migration context\n */\nexport const MigrationProvider = ({\n  children,\n  ...props\n}: PropsWithChildren<MigrationContextType>) => {\n  return (\n    <MigrationContext.Provider value={props}>\n      {children}\n    </MigrationContext.Provider>\n  );\n};\n\nMigrationProvider.displayName = 'MigrationProvider';\n\nMigrationProvider.propTypes = { children: PropTypes.node };\n","import React, { createContext, useContext } from 'react';\n\nexport interface PortalContextValues {\n  popover: {\n    portalContainer?: HTMLElement | null;\n    scrollContainer?: HTMLElement | null;\n  };\n}\n\nconst defaultPortalContextValues: PortalContextValues = {\n  popover: {\n    portalContainer: undefined,\n    scrollContainer: undefined,\n  },\n};\n\nconst PortalContext = createContext<PortalContextValues>(\n  defaultPortalContextValues,\n);\n\nexport function usePopoverPortalContainer() {\n  const { popover } = useContext(PortalContext);\n\n  return popover;\n}\n\ninterface PortalContext {\n  popover?: PortalContextValues['popover'];\n  children: React.ReactNode;\n}\n\nexport function PortalContextProvider({\n  popover = defaultPortalContextValues.popover,\n  children,\n}: PortalContext) {\n  return (\n    <PortalContext.Provider value={{ popover }}>\n      {children}\n    </PortalContext.Provider>\n  );\n}\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\n// TODO: Refresh - update to 13 | 16\ntype FontSize = 14 | 16;\nexport interface TypographyProviderProps {\n  /**\n   * The base font size of all LeafyGreen components unless overridden.\n   */\n  baseFontSize?: FontSize;\n}\n\nconst BaseFontSizeContext = createContext<FontSize>(14);\n\nexport function useBaseFontSize() {\n  return useContext(BaseFontSizeContext);\n}\n\nfunction TypographyProvider({\n  children,\n  baseFontSize = 14,\n}: PropsWithChildren<TypographyProviderProps>) {\n  return (\n    <BaseFontSizeContext.Provider value={baseFontSize}>\n      {children}\n    </BaseFontSizeContext.Provider>\n  );\n}\n\nTypographyProvider.displayName = 'TypographyProvider';\n\nTypographyProvider.propTypes = {\n  children: PropTypes.node,\n  baseFontSize: PropTypes.number,\n};\n\nexport default TypographyProvider;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useEventListener } from '@leafygreen-ui/hooks';\n\ninterface UsingKeyboardState {\n  usingKeyboard: boolean;\n  setUsingKeyboard: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst initialState: UsingKeyboardState = {\n  usingKeyboard: true,\n  setUsingKeyboard: () => {},\n};\n\nexport const UsingKeyboardContext =\n  createContext<UsingKeyboardState>(initialState);\n\n// All keys here are used to manage focus through keyboard interaction.\nexport const NavigationKeyCodes: { readonly [k: string]: number } = {\n  tab: 9,\n  leftArrow: 37,\n  upArrow: 38,\n  rightArrow: 39,\n  downArrow: 40,\n} as const;\n\nexport function useUsingKeyboardContext(): UsingKeyboardState {\n  return useContext(UsingKeyboardContext);\n}\n\ninterface UsingKeyboardProviderProps {\n  children?: React.ReactNode;\n}\n\nfunction UsingKeyboardProvider({ children }: UsingKeyboardProviderProps) {\n  // Initialize `usingKeyboard` to true\n  // Defaulting to true allows autofocus to display a focus state.\n  const [usingKeyboard, setUsingKeyboard] = useState(\n    initialState.usingKeyboard,\n  );\n\n  // When the user uses the mouse, they're not using the keyboard\n  useEventListener('mousedown', () => setUsingKeyboard(false), {\n    enabled: usingKeyboard,\n  });\n\n  // When the user presses a navigation key, they are using the keyboard\n  useEventListener(\n    'keydown',\n    ({ keyCode }) => {\n      if (Object.values(NavigationKeyCodes).includes(keyCode)) {\n        setUsingKeyboard(true);\n      }\n    },\n    { enabled: !usingKeyboard },\n  );\n\n  const providerValue = useMemo(\n    () => ({\n      usingKeyboard,\n      setUsingKeyboard,\n    }),\n    [usingKeyboard],\n  );\n\n  return (\n    <UsingKeyboardContext.Provider value={providerValue}>\n      {children}\n    </UsingKeyboardContext.Provider>\n  );\n}\n\nUsingKeyboardProvider.displayName = 'UsingKeyboardProvider';\n\nUsingKeyboardProvider.propTypes = { children: PropTypes.node };\n\nexport default UsingKeyboardProvider;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DarkModeProvider, { useDarkModeContext } from './DarkModeContext';\nimport { LeafyGreenProviderProps } from './LeafyGreenContext.types';\nimport { MigrationProvider, useMigrationContext } from './MigrationContext';\nimport {\n  PortalContextProvider,\n  usePopoverPortalContainer,\n} from './PortalContext';\nimport TypographyProvider, { useBaseFontSize } from './TypographyContext';\nimport UsingKeyboardProvider from './UsingKeyboardContext';\n\nfunction LeafyGreenProvider({\n  children,\n  baseFontSize: fontSizeProp,\n  popoverPortalContainer: popoverPortalContainerProp,\n  darkMode: darkModeProp,\n  forceUseTopLayer: forceUseTopLayerProp = false,\n}: PropsWithChildren<LeafyGreenProviderProps>) {\n  /**\n   * If `darkMode` prop is provided, use that. Otherwise, use context value\n   */\n  const { contextDarkMode: inheritedDarkMode } = useDarkModeContext();\n  const [darkModeState, setDarkMode] = useState(\n    darkModeProp ?? inheritedDarkMode,\n  );\n\n  useEffect(() => {\n    setDarkMode(darkModeProp ?? inheritedDarkMode);\n  }, [darkModeProp, inheritedDarkMode]);\n\n  /**\n   * If `baseFontSize` prop is provided, use that. Otherwise, use context value\n   */\n  const inheritedFontSize = useBaseFontSize();\n  const baseFontSize = fontSizeProp ?? inheritedFontSize;\n\n  /**\n   * If `popoverPortalContainer` prop is provided, use that. Otherwise, use context value\n   */\n  const inheritedContainer = usePopoverPortalContainer();\n  const popoverPortalContainer =\n    popoverPortalContainerProp ?? inheritedContainer;\n\n  /**\n   * If `forceUseTopLayerProp` is true, it will globally apply to all children\n   */\n  const migrationContext = useMigrationContext();\n  const forceUseTopLayer =\n    forceUseTopLayerProp || migrationContext.forceUseTopLayer;\n\n  return (\n    <UsingKeyboardProvider>\n      <PortalContextProvider popover={popoverPortalContainer}>\n        <TypographyProvider baseFontSize={baseFontSize}>\n          <DarkModeProvider\n            contextDarkMode={darkModeState}\n            setDarkMode={setDarkMode}\n          >\n            <MigrationProvider forceUseTopLayer={forceUseTopLayer}>\n              {children}\n            </MigrationProvider>\n          </DarkModeProvider>\n        </TypographyProvider>\n      </PortalContextProvider>\n    </UsingKeyboardProvider>\n  );\n}\n\nLeafyGreenProvider.displayName = 'LeafyGreenProvider';\n\nLeafyGreenProvider.propTypes = {\n  popoverPortalContainer: PropTypes.shape({\n    popover: PropTypes.shape({\n      portalContainer: PropTypes.elementType,\n      scrollContainer: PropTypes.elementType,\n    }),\n  }),\n  baseFontSize: PropTypes.oneOf([14, 16]),\n  darkMode: PropTypes.bool,\n};\n\nexport default LeafyGreenProvider;\n","import React, {\n  createContext,\n  PropsWithChildren,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PopoverContextType } from './PopoverContext.types';\n\nexport const PopoverContext = createContext<PopoverContextType>({\n  isPopoverOpen: false,\n  setIsPopoverOpen: () => {},\n});\n\n/**\n * Access the popover context to read and write if a popover element is open in a modal\n */\nexport const usePopoverContext = (): PopoverContextType => {\n  return useContext(PopoverContext);\n};\n\n/**\n * Creates a Popover context to read and write if a popover element is open in a modal\n * Call `usePopoverContext` to access the popover state\n * This is defined separately from `PopoverPropsContext` to avoid incorrectly resetting `isPopoverOpen` value\n * We avoid renaming this provider because it will trigger major changes in all packages because\n * `@leafygreen-ui/leafygreen-provider` is a peer dependency to all LG packages\n */\nexport const PopoverProvider = ({ children }: PropsWithChildren<{}>) => {\n  const [isPopoverOpen, setIsPopoverOpen] = useState<boolean>(false);\n\n  const providerValue = useMemo(\n    () => ({\n      isPopoverOpen,\n      setIsPopoverOpen,\n    }),\n    [isPopoverOpen],\n  );\n\n  return (\n    <PopoverContext.Provider value={providerValue}>\n      {children}\n    </PopoverContext.Provider>\n  );\n};\n\nPopoverProvider.displayName = 'PopoverProvider';\n\nPopoverProvider.propTypes = { children: PropTypes.node };\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  PortalContextProvider,\n  usePopoverPortalContainer,\n} from '../PortalContext';\n\nimport { PopoverPropsProviderProps } from './PopoverPropsContext.types';\n\nexport const PopoverPropsContext = createContext<PopoverPropsProviderProps>({});\n\n/**\n * Access the popover props context to read props passed to nested popover component instances\n */\nexport const usePopoverPropsContext = (): PopoverPropsProviderProps => {\n  return useContext(PopoverPropsContext);\n};\n\n/**\n * Creates a PopoverProps context to pass props to a deeply nested popover element\n * Call `usePopoverPropsContext` to access the popover state\n * This is defined separately from `PopoverContext` to avoid incorrectly resetting `isPopoverOpen` value\n */\nexport const PopoverPropsProvider = ({\n  children,\n  ...props\n}: PropsWithChildren<PopoverPropsProviderProps>) => {\n  const popoverPortalContext = usePopoverPortalContainer();\n  const popover = {\n    portalContainer:\n      props.portalContainer || popoverPortalContext.portalContainer,\n    scrollContainer:\n      props.scrollContainer || popoverPortalContext.scrollContainer,\n  };\n\n  return (\n    <PopoverPropsContext.Provider value={props}>\n      <PortalContextProvider popover={popover}>\n        {children}\n      </PortalContextProvider>\n    </PopoverPropsContext.Provider>\n  );\n};\n\nPopoverPropsProvider.displayName = 'PopoverPropsProvider';\n\nPopoverPropsProvider.propTypes = { children: PropTypes.node };\n","import { Transition } from 'react-transition-group';\n\n/**\n * These types are duplicated in `@leafygreen-ui/popover`: https://github.com/mongodb/leafygreen-ui/blob/02e1d77e5ed7d55f9b8402299eae0c6d540c53f8/packages/popover/src/Popover.types.ts\n *\n * We cannot import `PopoverProps` into `@leafygreen-ui/leafygreen-provider` without introducing a circular dependency.\n */\n\ntype TransitionProps = React.ComponentProps<typeof Transition<HTMLElement>>;\n\ntype TransitionLifecycleCallbacks = Pick<\n  TransitionProps,\n  'onEnter' | 'onEntering' | 'onEntered' | 'onExit' | 'onExiting' | 'onExited'\n>;\n\n/**\n * Options to render the popover element\n * @param Inline will render the popover element inline in the DOM where it's written\n * @param Portal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`\n * @param TopLayer will render the popover element in the top layer\n */\nexport const RenderMode = {\n  Inline: 'inline',\n  Portal: 'portal',\n  TopLayer: 'top-layer',\n} as const;\nexport type RenderMode = (typeof RenderMode)[keyof typeof RenderMode];\n\n/**\n * Options to control how the popover element is dismissed. This should not be altered\n * because it is intended to have parity with the web-native {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover popover attribute}\n * @param Auto will automatically handle dismissal on backdrop click or esc key press, ensuring only one popover is visible at a time\n * @param Manual will require that the consumer handle dismissal manually\n */\nconst DismissMode = {\n  Auto: 'auto',\n  Manual: 'manual',\n} as const;\ntype DismissMode = (typeof DismissMode)[keyof typeof DismissMode];\n\n/** Local implementation of web-native `ToggleEvent` until we use typescript v5 */\ninterface ToggleEvent extends Event {\n  type: 'toggle';\n  newState: 'open' | 'closed';\n  oldState: 'open' | 'closed';\n}\n\nexport interface RenderInlineProps {\n  /**\n   * Options to render the popover element\n   * @defaultValue 'top-layer'\n   * @param Inline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\n   * @param Portal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\n   * @param TopLayer will render the popover element in the top layer\n   */\n  renderMode: 'inline';\n\n  /**\n   * When `renderMode=\"top-layer\"`, these options can control how a popover element is dismissed\n   * - `'auto'` will automatically handle dismissal on backdrop click or key press, ensuring only one popover is visible at a time\n   * - `'manual'` will require that the consumer handle dismissal manually\n   */\n  dismissMode?: never;\n\n  /**\n   * A callback function that is called when the visibility of a popover element rendered in the top layer is toggled\n   */\n  onToggle?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies a class name to apply to the portal element\n   * @deprecated\n   */\n  portalClassName?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies an element to portal within. If not provided, a div is generated at the end of the body\n   * @deprecated\n   */\n  portalContainer?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it passes a ref to forward to the portal element\n   * @deprecated\n   */\n  portalRef?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies the scrollable element to position relative to\n   * @deprecated\n   */\n  scrollContainer?: never;\n}\n\nexport interface RenderPortalProps {\n  /**\n   * Options to render the popover element\n   * @defaultValue 'top-layer'\n   * @param Inline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\n   * @param Portal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\n   * @param TopLayer will render the popover element in the top layer\n   */\n  renderMode: 'portal';\n\n  /**\n   * When `renderMode=\"top-layer\"`, these options can control how a popover element is dismissed\n   * - `'auto'` will automatically handle dismissal on backdrop click or key press, ensuring only one popover is visible at a time\n   * - `'manual'` will require that the consumer handle dismissal manually\n   */\n  dismissMode?: never;\n\n  /**\n   * When `renderMode=\"top-layer\"`, this callback function is called when the visibility of a popover element is toggled\n   */\n  onToggle?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies a class name to apply to the portal element\n   * @deprecated\n   */\n  portalClassName?: string;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies an element to portal within. If not provided, a div is generated at the end of the body\n   * @deprecated\n   */\n  portalContainer?: HTMLElement | null;\n\n  /**\n   * When `renderMode=\"portal\"`, it passes a ref to forward to the portal element\n   * @deprecated\n   */\n  portalRef?: React.MutableRefObject<HTMLElement | null>;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies the scrollable element to position relative to\n   * @deprecated\n   */\n  scrollContainer?: HTMLElement | null;\n}\n\nexport interface RenderTopLayerProps {\n  /**\n   * Options to render the popover element\n   * @defaultValue 'top-layer'\n   * @param Inline will render the popover element inline in the DOM where it's written. This option is deprecated and will be removed in the future.\n   * @param Portal will render the popover element in a new div appended to the body. Alternatively, can be portaled into a provided `portalContainer`. This option is deprecated and will be removed in the future.\n   * @param TopLayer will render the popover element in the top layer\n   */\n  renderMode?: 'top-layer';\n\n  /**\n   * When `renderMode=\"top-layer\"`, these options can control how a popover element is dismissed\n   * - `'auto'` will automatically handle dismissal on backdrop click or key press, ensuring only one popover is visible at a time\n   * - `'manual'` will require that the consumer handle dismissal manually\n   */\n  dismissMode?: DismissMode;\n\n  /**\n   * A callback function that is called when the visibility of a popover element rendered in the top layer is toggled\n   */\n  onToggle?: (e: ToggleEvent) => void;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies a class name to apply to the portal element\n   * @deprecated\n   */\n  portalClassName?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies an element to portal within. If not provided, a div is generated at the end of the body\n   * @deprecated\n   */\n  portalContainer?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it passes a ref to forward to the portal element\n   * @deprecated\n   */\n  portalRef?: never;\n\n  /**\n   * When `renderMode=\"portal\"`, it specifies the scrollable element to position relative to\n   * @deprecated\n   */\n  scrollContainer?: never;\n}\n\ntype PopoverRenderModeProps =\n  | RenderPortalProps\n  | RenderInlineProps\n  | RenderTopLayerProps;\n\nexport type PopoverPropsProviderProps = {\n  /**\n   * Specifies the amount of spacing (in pixels) between the trigger element and the Popover content.\n   *\n   * default: `10`\n   */\n  spacing?: number;\n\n  /**\n   * Number that controls the z-index of the popover element directly.\n   */\n  popoverZIndex?: number;\n} & PopoverRenderModeProps &\n  TransitionLifecycleCallbacks;\n"],"names":["DarkModeContext","createContext","contextDarkMode","setDarkMode","useDarkModeContext","useContext","useDarkMode","localDarkMode","_ref","_useDarkModeContext","darkMode","theme","getTheme","DarkModeProvider","_ref2","children","React","createElement","Provider","value","displayName","propTypes","PropTypes","node","bool","_excluded","MigrationContext","forceUseTopLayer","useMigrationContext","MigrationProvider","props","_objectWithoutProperties","defaultPortalContextValues","popover","portalContainer","undefined","scrollContainer","PortalContext","usePopoverPortalContainer","PortalContextProvider","_ref$popover","BaseFontSizeContext","useBaseFontSize","TypographyProvider","_ref$baseFontSize","baseFontSize","number","initialState","usingKeyboard","setUsingKeyboard","UsingKeyboardContext","NavigationKeyCodes","tab","leftArrow","upArrow","rightArrow","downArrow","useUsingKeyboardContext","UsingKeyboardProvider","_useState2","_slicedToArray","useState","useEventListener","enabled","keyCode","Object","values","includes","providerValue","useMemo","LeafyGreenProvider","fontSizeProp","popoverPortalContainerProp","popoverPortalContainer","darkModeProp","_ref$forceUseTopLayer","forceUseTopLayerProp","inheritedDarkMode","darkModeState","useEffect","inheritedFontSize","inheritedContainer","migrationContext","shape","elementType","oneOf","PopoverContext","isPopoverOpen","setIsPopoverOpen","usePopoverContext","PopoverProvider","PopoverPropsContext","usePopoverPropsContext","PopoverPropsProvider","popoverPortalContext","RenderMode","Inline","Portal","TopLayer"],"mappings":"mOAGA,IAAIA,EAA+BC,EAAc,CAC/CC,iBAAiB,EACjBC,YAAa,WAAyB,IAE7BC,EAAqB,WAC9B,OAAOC,EAAWL,EACpB,EACWM,EAAc,SAAqBC,GAC5C,IAAIC,EACAC,EAAsBL,IACxBF,EAAkBO,EAAoBP,gBACtCC,EAAcM,EAAoBN,YAChCO,EAA6G,QAAjGF,EAAOD,QAAqDA,EAAgBL,SAAsC,IAATM,GAAkBA,EAE3I,MAAO,CACLE,SAAUA,EACVC,MAHUC,EAASF,GAInBP,YAAaA,EAEjB,EACA,SAASU,EAAiBC,GACxB,IAAIC,EAAWD,EAAMC,SACnBb,EAAkBY,EAAMZ,gBACxBC,EAAcW,EAAMX,YACtB,OAAoBa,EAAMC,cAAcjB,EAAgBkB,SAAU,CAChEC,MAAO,CACLjB,gBAAiBA,EACjBC,YAAaA,IAEdY,EACL,42CACAF,EAAiBO,YAAc,mBAC/BP,EAAiBQ,UAAY,CAC3BN,SAAUO,EAAUC,KACpBrB,gBAAiBoB,EAAUE,MCpC7B,IAAIC,EAAY,CAAC,YAGNC,EAAgCzB,EAAc,CACvD0B,kBAAkB,IAMTC,EAAsB,WAC/B,OAAOvB,EAAWqB,EACpB,EAMWG,EAAoB,SAA2BrB,GACxD,IAAIO,EAAWP,EAAKO,SAClBe,EAAQC,EAAyBvB,EAAMiB,GACzC,OAAoBT,EAAMC,cAAcS,EAAiBR,SAAU,CACjEC,MAAOW,GACNf,EACL,EACAc,EAAkBT,YAAc,oBAChCS,EAAkBR,UAAY,CAC5BN,SAAUO,EAAUC,MC3BtB,IAAIS,EAA6B,CAC/BC,QAAS,CACPC,qBAAiBC,EACjBC,qBAAiBD,IAGjBE,EAA6BpC,EAAc+B,GACxC,SAASM,IAGd,OAFkBjC,EAAWgC,GACLJ,OAE1B,CACO,SAASM,EAAsB/B,GACpC,IAAIgC,EAAehC,EAAKyB,QACtBA,OAA2B,IAAjBO,EAA0BR,EAA2BC,QAAUO,EACzEzB,EAAWP,EAAKO,SAClB,OAAoBC,EAAMC,cAAcoB,EAAcnB,SAAU,CAC9DC,MAAO,CACLc,QAASA,IAEVlB,EACL,CCjBA,IAAI0B,EAAmCxC,EAAc,IAC9C,SAASyC,IACd,OAAOrC,EAAWoC,EACpB,CACA,SAASE,EAAmBnC,GAC1B,IAAIO,EAAWP,EAAKO,SAClB6B,EAAoBpC,EAAKqC,aACzBA,OAAqC,IAAtBD,EAA+B,GAAKA,EACrD,OAAoB5B,EAAMC,cAAcwB,EAAoBvB,SAAU,CACpEC,MAAO0B,GACN9B,EACL,CACA4B,EAAmBvB,YAAc,qBACjCuB,EAAmBtB,UAAY,CAC7BN,SAAUO,EAAUC,KACpBsB,aAAcvB,EAAUwB,QChB1B,IAAIC,EAAe,CACjBC,eAAe,EACfC,iBAAkB,WAA8B,GAEvCC,EAAoCjD,EAAc8C,GAGlDI,EAAqB,CAC9BC,IAAK,EACLC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,UAAW,IAEN,SAASC,IACd,OAAOpD,EAAW6C,EACpB,CACA,SAASQ,EAAsBlD,GAC7B,IAAIO,EAAWP,EAAKO,SAIlB4C,EAAaC,EADCC,EAASd,EAAaC,eACG,GACvCA,EAAgBW,EAAW,GAC3BV,EAAmBU,EAAW,GAGhCG,EAAiB,aAAa,WAC5B,OAAOb,GAAiB,EAC5B,GAAK,CACDc,QAASf,IAIXc,EAAiB,WAAW,SAAUhD,GACpC,IAAIkD,EAAUlD,EAAMkD,QAChBC,OAAOC,OAAOf,GAAoBgB,SAASH,IAC7Cf,GAAiB,EAEvB,GAAK,CACDc,SAAUf,IAEZ,IAAIoB,EAAgBC,GAAQ,WAC1B,MAAO,CACLrB,cAAeA,EACfC,iBAAkBA,EAExB,GAAK,CAACD,IACJ,OAAoBhC,EAAMC,cAAciC,EAAqBhC,SAAU,CACrEC,MAAOiD,GACNrD,EACL,CC/CA,SAASuD,EAAmB9D,GAC1B,IAAIO,EAAWP,EAAKO,SAClBwD,EAAe/D,EAAKqC,aACpB2B,EAA6BhE,EAAKiE,uBAClCC,EAAelE,EAAKE,SACpBiE,EAAwBnE,EAAKmB,iBAC7BiD,OAAiD,IAA1BD,GAA2CA,EAKlEE,EADwBzE,IACgBF,gBAExCyD,EAAaC,EADCC,EAASa,QAAmDA,EAAeG,GAClD,GACvCC,EAAgBnB,EAAW,GAC3BxD,EAAcwD,EAAW,GAC3BoB,GAAU,WACR5E,EAAYuE,QAAmDA,EAAeG,EAClF,GAAK,CAACH,EAAcG,IAKlB,IAAIG,EAAoBtC,IACpBG,EAAe0B,QAAmDA,EAAeS,EAKjFC,EAAqB3C,IACrBmC,EAAyBD,QAA+EA,EAA6BS,EAKrIC,EAAmBtD,IACnBD,EAAmBiD,GAAwBM,EAAiBvD,iBAChE,OAAoBX,EAAMC,cAAcyC,EAAuB,KAAmB1C,EAAMC,cAAcsB,EAAuB,CAC3HN,QAASwC,GACKzD,EAAMC,cAAc0B,EAAoB,CACtDE,aAAcA,GACA7B,EAAMC,cAAcJ,EAAkB,CACpDX,gBAAiB4E,EACjB3E,YAAaA,GACCa,EAAMC,cAAcY,EAAmB,CACrDF,iBAAkBA,GACjBZ,MACL,CDCA2C,EAAsBtC,YAAc,wBACpCsC,EAAsBrC,UAAY,CAChCN,SAAUO,EAAUC,MCFtB+C,EAAmBlD,YAAc,qBACjCkD,EAAmBjD,UAAY,CAC7BoD,uBAAwBnD,EAAU6D,MAAM,CACtClD,QAASX,EAAU6D,MAAM,CACvBjD,gBAAiBZ,EAAU8D,YAC3BhD,gBAAiBd,EAAU8D,gBAG/BvC,aAAcvB,EAAU+D,MAAM,CAAC,GAAI,KACnC3E,SAAUY,EAAUE,MC9DZ,IAAC8D,EAA8BrF,EAAc,CACrDsF,eAAe,EACfC,iBAAkB,WAA8B,IAMvCC,EAAoB,WAC7B,OAAOpF,EAAWiF,EACpB,EASWI,EAAkB,SAAyBlF,GACpD,IAAIO,EAAWP,EAAKO,SAElB4C,EAAaC,EADCC,GAAS,GACgB,GACvC0B,EAAgB5B,EAAW,GAC3B6B,EAAmB7B,EAAW,GAC5BS,EAAgBC,GAAQ,WAC1B,MAAO,CACLkB,cAAeA,EACfC,iBAAkBA,EAExB,GAAK,CAACD,IACJ,OAAoBvE,EAAMC,cAAcqE,EAAepE,SAAU,CAC/DC,MAAOiD,GACNrD,EACL,EACA2E,EAAgBtE,YAAc,kBAC9BsE,EAAgBrE,UAAY,CAC1BN,SAAUO,EAAUC,MCvCtB,IAAIE,EAAY,CAAC,YAINkE,EAAmC1F,EAAc,IAKjD2F,EAAyB,WAClC,OAAOvF,EAAWsF,EACpB,EAOWE,EAAuB,SAA8BrF,GAC9D,IAAIO,EAAWP,EAAKO,SAClBe,EAAQC,EAAyBvB,EAAMiB,GACrCqE,EAAuBxD,IACvBL,EAAU,CACZC,gBAAiBJ,EAAMI,iBAAmB4D,EAAqB5D,gBAC/DE,gBAAiBN,EAAMM,iBAAmB0D,EAAqB1D,iBAEjE,OAAoBpB,EAAMC,cAAc0E,EAAoBzE,SAAU,CACpEC,MAAOW,GACOd,EAAMC,cAAcsB,EAAuB,CACzDN,QAASA,GACRlB,GACL,EACA8E,EAAqBzE,YAAc,uBACnCyE,EAAqBxE,UAAY,CAC/BN,SAAUO,EAAUC,MCvBZ,IAACwE,EAAa,CACtBC,OAAQ,SACRC,OAAQ,SACRC,SAAU"}